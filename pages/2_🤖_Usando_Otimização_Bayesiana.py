import streamlit as st
import pandas as pd
import numpy as np
from skopt.space import Integer
import plotly.express as px
from lib.otimizacao import OtimizacaoBayesiana

st.set_page_config(page_title="Otimiza√ß√£o Bayesiana", page_icon="ü§ñ")

def reset_variables():
    if 'resultados_otimizacao' in st.session_state:
        del st.session_state.resultados_otimizacao

def main():
    st.title('Aplicando a Otimiza√ß√£o Bayesiana')

    df_tabuas = pd.read_excel('Fun√ß√µes Biom√©tricas (Com F√≥rmulas).xlsx', sheet_name='qx')
    modelo_csv = pd.read_csv('modelo_csv.csv', sep=';')
    
    st.sidebar.subheader("Download do Modelo do csv")
    csv = modelo_csv.to_csv(index=False, sep=';').encode('utf-8')
    st.sidebar.download_button(
        label="Download modelo CSV",
        data=csv,
        file_name="modelo_csv.csv",
        mime="text/csv",
    )

    st.sidebar.subheader("Importar Dados")
    uploaded_file = st.sidebar.file_uploader("Caso n√£o fa√ßa upload do seu arquivo CSV a aplica√ß√£o usar√° o modelo padr√£o", type="csv")
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file, sep=';')
        st.sidebar.markdown("Arquivo CSV carregado com sucesso!")
    else:
        df = modelo_csv

    ob = OtimizacaoBayesiana(f_obs=np.array(df['qtda_morte']), f_vivos=np.array(df['qtda_vivo'].values), tabuas=df_tabuas)

    st.markdown("#### Configura√ß√£o das t√°buas:")
    col1, col2 = st.columns(2)
    
    with col1:
        fator_agravo = st.slider("Selecione o Range do Agravo e Suaviza√ß√£o (%)", -100.00, 100.00, (-10.0, 10.0), help="Agravo e suaviza√ß√£o s√£o ajustes aplicados √† t√°bua de mortalidade. O agravo aumenta as taxas de mortalidade e √© representado por valores positivos neste controle deslizante. A suaviza√ß√£o, por outro lado, diminui as taxas de mortalidade e √© representado por valores negativos. Defina o intervalo de agravo selecionando valores positivos e o intervalo de suaviza√ß√£o selecionando valores negativos.")
    
    with col2:
        delay = st.slider("Selecione o Range do Deslocamento", -100.00, 100.00, (-5.0, 5.0), help="O deslocamento √© um ajuste aplicado √† t√°bua de mortalidade que atrasa as taxas de mortalidade. Isso √© representado por valores positivos neste controle deslizante. Defina o intervalo de deslocamento selecionando valores dentro do range.")

    st.markdown("#### Configura√ß√£o da Otimiza√ß√£o Bayesiana:")
    col1, col2, col3 = st.columns(3)
 
    with col1:
        n_calls = st.slider("n_calls", 1, 200, 20, help="N√∫mero total de chamadas √† fun√ß√£o objetivo. Inclui n_random_starts e n_initial_points.")

    with col2:
        random_state = st.slider("random_state", 1, 200, 32, help="Semente aleat√≥ria para garantir a reprodutibilidade dos resultados da otimiza√ß√£o.")

    with col3:
        n_initial_points = st.slider("n_initial_points", 1, 200, 10, help="N√∫mero de pontos iniciais que a otimiza√ß√£o deve come√ßar.")

    if st.button('Iniciar Otimiza√ß√£o', type='primary', on_click=reset_variables):
        with st.spinner('Aguarde enquanto a otimiza√ß√£o √© realizada...'):
            st.markdown("### Resultado Final da Otimiza√ß√£o Bayesiana")
            
            resultado_placeholder = st.empty()
            
            if 'resultados_otimizacao' not in st.session_state:
                st.session_state.resultados_otimizacao = []
                
            resultado_otimizacao = ob.aplicar_otimizacao(
                espaco_parametros=[Integer(0, df_tabuas.shape[1]-1), 
                                   Integer(fator_agravo[0], fator_agravo[1]), 
                                   Integer(delay[0], delay[1])],
                resultado_placeholder=resultado_placeholder,
                n_calls=n_calls,
                n_initial_points=n_initial_points,
                random_state=random_state,
            )
        
            st.markdown("##### T√°buas que N√ÉO rejeitam H‚ÇÄ")
            df_resultados = pd.DataFrame(st.session_state.resultados_otimizacao)
            st.dataframe(df_resultados[(df_resultados['Decis√£o Qui-Quadrado'] == 'N√£o rejeitar H‚ÇÄ') & (df_resultados['Decis√£o KS'] == 'N√£o rejeitar H‚ÇÄ')])

            fig = px.line(st.session_state.resultados_otimizacao, 
              x='Itera√ß√£o', 
              y='Fun√ß√£o Objetivo',
              title='Evolu√ß√£o da Fun√ß√£o Objetivo',
              markers=True)

            fig.update_layout(title_font_size=18)
            st.plotly_chart(fig)

if __name__ == '__main__':
    main()